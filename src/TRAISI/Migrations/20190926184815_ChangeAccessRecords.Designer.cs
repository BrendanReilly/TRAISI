// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace TRAISI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190926184815_ChangeAccessRecords")]
    partial class ChangeAccessRecords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DAL.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("Level");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Configuration");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<int>("UserType");
                });

            modelBuilder.Entity("DAL.Models.Groups.ApiKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("GoogleMapsApiKey");

                    b.Property<int>("GroupId");

                    b.Property<string>("MailgunApiKey");

                    b.Property<string>("MapBoxApiKey");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("DAL.Models.Groups.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("GroupId");

                    b.Property<string>("HTML");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("DAL.Models.Groups.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateJoined");

                    b.Property<string>("Group");

                    b.Property<bool>("GroupAdmin");

                    b.Property<string>("TraisiUserId");

                    b.Property<int?>("UserGroupId");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("TraisiUserId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("DAL.Models.Groups.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionConditional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Condition");

                    b.Property<int>("SourceQuestionId");

                    b.Property<int>("TargetQuestionId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SourceQuestionId");

                    b.HasIndex("TargetQuestionId");

                    b.ToTable("QuestionConditionals");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsResourceOnly");

                    b.Property<bool>("IsSourceInputRequired");

                    b.Property<string>("Name");

                    b.Property<int?>("QuestionPartId");

                    b.Property<string>("Value");

                    b.Property<int>("ValueType");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartId");

                    b.ToTable("QuestionConfigurations");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionConfigurationLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int?>("QuestionConfigurationId");

                    b.Property<int>("QuestionOptionId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionConfigurationId");

                    b.HasIndex("QuestionOptionId");

                    b.ToTable("QuestionConfigurationLabel");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("QuestionPartParentId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartParentId");

                    b.HasIndex("Code", "QuestionPartParentId")
                        .IsUnique();

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionOptionConditional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Condition");

                    b.Property<int>("SourceQuestionId");

                    b.Property<int>("TargetOptionId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SourceQuestionId");

                    b.HasIndex("TargetOptionId");

                    b.ToTable("QuestionOptionConditionals");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionOptionLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int>("QuestionOptionId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionOptionId");

                    b.ToTable("QuestionOptionLabels");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsGroupQuestion");

                    b.Property<string>("Name");

                    b.Property<int?>("QuestionPartId");

                    b.Property<string>("QuestionType");

                    b.Property<int?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("SurveyId");

                    b.ToTable("QuestionParts");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionPartView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CATIDependentId");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDefaultHidden");

                    b.Property<bool>("IsHousehold");

                    b.Property<bool>("IsMultiView");

                    b.Property<bool>("IsOptional");

                    b.Property<int>("Order");

                    b.Property<int?>("ParentViewId");

                    b.Property<int?>("QuestionPartId");

                    b.Property<int?>("RepeatSourceId");

                    b.Property<int?>("SurveyViewId");

                    b.HasKey("Id");

                    b.HasIndex("CATIDependentId");

                    b.HasIndex("ParentViewId");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("RepeatSourceId");

                    b.HasIndex("SurveyViewId");

                    b.ToTable("QuestionPartViews");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionPartViewLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int>("QuestionPartViewId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartViewId");

                    b.ToTable("QuestionPartViewLabels");
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.ResponseValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OptionListResponseId");

                    b.Property<int>("ResponseType");

                    b.Property<int?>("SurveyResponseId");

                    b.HasKey("Id");

                    b.HasIndex("OptionListResponseId");

                    b.HasIndex("SurveyResponseId");

                    b.ToTable("ResponseValues");

                    b.HasDiscriminator<int>("ResponseType");
                });

            modelBuilder.Entity("DAL.Models.Surveys.ExtensionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("ExtensionName")
                        .IsRequired();

                    b.Property<int?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("ExtensionConfigurations");
                });

            modelBuilder.Entity("DAL.Models.Surveys.Groupcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsTest");

                    b.Property<string>("Name");

                    b.Property<int?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Groupcodes");
                });

            modelBuilder.Entity("DAL.Models.Surveys.ScreeningQuestionsPageLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int>("SurveyViewId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SurveyViewId");

                    b.ToTable("ScreeningQuestionsLabels");
                });

            modelBuilder.Entity("DAL.Models.Surveys.Shortcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("GroupcodeId");

                    b.Property<bool>("IsTest");

                    b.Property<int?>("SurveyId");

                    b.HasKey("Id");

                    b.HasIndex("GroupcodeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Shortcodes");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SiteSurveyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CSS");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("HTML");

                    b.Property<string>("Name");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("SiteSurveyTemplates");
                });

            modelBuilder.Entity("DAL.Models.Surveys.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DefaultLanguage");

                    b.Property<DateTime>("EndAt");

                    b.Property<string>("Group");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsOpen");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Owner");

                    b.Property<string>("RejectionLink");

                    b.Property<DateTime>("StartAt");

                    b.Property<string>("StyleTemplate");

                    b.Property<string>("SuccessLink");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyAccessRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AccessDateTime");

                    b.Property<string>("AccessUserId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("QueryParams")
                        .HasColumnType("jsonb");

                    b.Property<int?>("RespondentId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserAgent");

                    b.HasKey("Id");

                    b.HasIndex("AccessUserId");

                    b.HasIndex("RespondentId");

                    b.ToTable("SurveyAccessRecords");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PermissionCode");

                    b.Property<int>("SurveyId");

                    b.Property<string>("TraisiUserId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("TraisiUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyPermissions");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyRespondent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Relationship");

                    b.Property<int>("RespondentType");

                    b.Property<int?>("SurveyRespondentGroupId");

                    b.HasKey("Id");

                    b.HasIndex("SurveyRespondentGroupId");

                    b.ToTable("SurveyRespondents");

                    b.HasDiscriminator<int>("RespondentType");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyRespondentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("SurveyRespondentGroups");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("QuestionPartId");

                    b.Property<int>("Repeat");

                    b.Property<int?>("RespondentId");

                    b.Property<int?>("SurveyAccessRecordId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SurveyAccessRecordId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SurveyId");

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyViews");
                });

            modelBuilder.Entity("DAL.Models.Surveys.TermsAndConditionsPageLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int>("SurveyViewId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SurveyViewId");

                    b.ToTable("TermsAndConditionsPageLabels");
                });

            modelBuilder.Entity("DAL.Models.Surveys.ThankYouPageLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int>("SurveyViewId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SurveyViewId");

                    b.ToTable("ThankYouPageLabels");
                });

            modelBuilder.Entity("DAL.Models.Surveys.TitlePageLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int?>("SurveyId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("TitlePageLabels");
                });

            modelBuilder.Entity("DAL.Models.Surveys.WelcomePageLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Language");

                    b.Property<int>("SurveyViewId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SurveyViewId");

                    b.ToTable("WelcomePageLabels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ClientSecret");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<string>("ConsentType");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Permissions");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("Properties");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<string>("Properties");

                    b.Property<string>("Scopes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Properties");

                    b.Property<string>("Resources");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationId");

                    b.Property<string>("AuthorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreationDate");

                    b.Property<DateTimeOffset?>("ExpirationDate");

                    b.Property<string>("Payload");

                    b.Property<string>("Properties");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("DAL.Models.SurveyUser", b =>
                {
                    b.HasBaseType("DAL.Models.ApplicationUser");

                    b.Property<int?>("PrimaryRespondentId");

                    b.Property<int?>("ShortcodeId");

                    b.HasIndex("PrimaryRespondentId");

                    b.HasIndex("ShortcodeId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DAL.Models.TraisiUser", b =>
                {
                    b.HasBaseType("DAL.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.DateTimeResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<DateTime>("Value");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.DecimalResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<double>("Value")
                        .HasColumnName("DecimalResponse_Value");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.IntegerResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<int>("Value")
                        .HasColumnName("IntegerResponse_Value");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.JsonResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Value")
                        .HasColumnName("JsonResponse_Value")
                        .HasColumnType("jsonb");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.LocationResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Address");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.OptionListResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.OptionSelectResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<string>("Value")
                        .HasColumnName("OptionSelectResponse_Value");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.PathResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<NpgsqlPath>("NPath")
                        .HasColumnName("Path");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.StringResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Value")
                        .HasColumnName("StringResponse_Value");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DAL.Models.Surveys.PrimaryRespondent", b =>
                {
                    b.HasBaseType("DAL.Models.Surveys.SurveyRespondent");

                    b.Property<int?>("GroupcodeId");

                    b.Property<int?>("ShortcodeId");

                    b.Property<int?>("SurveyId");

                    b.Property<string>("UserId");

                    b.HasIndex("GroupcodeId");

                    b.HasIndex("ShortcodeId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("DAL.Models.Surveys.SubRespondent", b =>
                {
                    b.HasBaseType("DAL.Models.Surveys.SurveyRespondent");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.TimelineResponse", b =>
                {
                    b.HasBaseType("DAL.Models.ResponseTypes.LocationResponse");

                    b.Property<string>("Name")
                        .HasColumnName("TimelineResponse_Name");

                    b.Property<string>("Purpose");

                    b.Property<DateTime>("TimeA");

                    b.Property<DateTime>("TimeB");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("DAL.Models.Groups.ApiKeys", b =>
                {
                    b.HasOne("DAL.Models.Groups.UserGroup", "Group")
                        .WithOne("ApiKeySettings")
                        .HasForeignKey("DAL.Models.Groups.ApiKeys", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Groups.EmailTemplate", b =>
                {
                    b.HasOne("DAL.Models.Groups.UserGroup", "Group")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Groups.GroupMember", b =>
                {
                    b.HasOne("DAL.Models.TraisiUser")
                        .WithMany("Groups")
                        .HasForeignKey("TraisiUserId");

                    b.HasOne("DAL.Models.Groups.UserGroup", "UserGroup")
                        .WithMany("Members")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionConditional", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPart", "SourceQuestion")
                        .WithMany("QuestionConditionalsSource")
                        .HasForeignKey("SourceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Questions.QuestionPart", "TargetQuestion")
                        .WithMany("QuestionConditionalsTarget")
                        .HasForeignKey("TargetQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionConfiguration", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPart")
                        .WithMany("QuestionConfigurations")
                        .HasForeignKey("QuestionPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionConfigurationLabel", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionConfiguration")
                        .WithMany("QuestionConfigurationLabels")
                        .HasForeignKey("QuestionConfigurationId");

                    b.HasOne("DAL.Models.Questions.QuestionOption", "QuestionOption")
                        .WithMany()
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionOption", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPart", "QuestionPartParent")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionPartParentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionOptionConditional", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPart", "SourceQuestion")
                        .WithMany("QuestionOptionConditionalsSource")
                        .HasForeignKey("SourceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Questions.QuestionOption", "TargetOption")
                        .WithMany("QuestionOptionConditionalsTarget")
                        .HasForeignKey("TargetOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionOptionLabel", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionOption", "QuestionOption")
                        .WithMany("QuestionOptionLabels")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionPart", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPart")
                        .WithMany("QuestionPartChildren")
                        .HasForeignKey("QuestionPartId");

                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionPartView", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPartView", "CATIDependent")
                        .WithMany()
                        .HasForeignKey("CATIDependentId");

                    b.HasOne("DAL.Models.Questions.QuestionPartView", "ParentView")
                        .WithMany("QuestionPartViewChildren")
                        .HasForeignKey("ParentViewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Questions.QuestionPart", "QuestionPart")
                        .WithMany()
                        .HasForeignKey("QuestionPartId");

                    b.HasOne("DAL.Models.Questions.QuestionPart", "RepeatSource")
                        .WithMany()
                        .HasForeignKey("RepeatSourceId");

                    b.HasOne("DAL.Models.Surveys.SurveyView", "SurveyView")
                        .WithMany("QuestionPartViews")
                        .HasForeignKey("SurveyViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Questions.QuestionPartViewLabel", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPartView", "QuestionPartView")
                        .WithMany("Labels")
                        .HasForeignKey("QuestionPartViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.ResponseTypes.ResponseValue", b =>
                {
                    b.HasOne("DAL.Models.ResponseTypes.OptionListResponse")
                        .WithMany("OptionResponseValues")
                        .HasForeignKey("OptionListResponseId");

                    b.HasOne("DAL.Models.Surveys.SurveyResponse", "SurveyResponse")
                        .WithMany("ResponseValues")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.ExtensionConfiguration", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany("ExtensionConfigurations")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("DAL.Models.Surveys.Groupcode", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany("GroupCodes")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.ScreeningQuestionsPageLabel", b =>
                {
                    b.HasOne("DAL.Models.Surveys.SurveyView", "SurveyView")
                        .WithMany("ScreeningQuestionLabels")
                        .HasForeignKey("SurveyViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.Shortcode", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Groupcode", "Groupcode")
                        .WithMany()
                        .HasForeignKey("GroupcodeId");

                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany("Shortcodes")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyAccessRecord", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser", "AccessUser")
                        .WithMany()
                        .HasForeignKey("AccessUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Surveys.PrimaryRespondent", "Respondent")
                        .WithMany("SurveyAccessRecords")
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyPermission", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany("SurveyPermissions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.TraisiUser")
                        .WithMany("SurveyPermissions")
                        .HasForeignKey("TraisiUserId");

                    b.HasOne("DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyRespondent", b =>
                {
                    b.HasOne("DAL.Models.Surveys.SurveyRespondentGroup", "SurveyRespondentGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("SurveyRespondentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyResponse", b =>
                {
                    b.HasOne("DAL.Models.Questions.QuestionPart", "QuestionPart")
                        .WithMany()
                        .HasForeignKey("QuestionPartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Surveys.SurveyRespondent", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId");

                    b.HasOne("DAL.Models.Surveys.SurveyAccessRecord", "SurveyAccessRecord")
                        .WithMany()
                        .HasForeignKey("SurveyAccessRecordId");
                });

            modelBuilder.Entity("DAL.Models.Surveys.SurveyView", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany("SurveyViews")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.TermsAndConditionsPageLabel", b =>
                {
                    b.HasOne("DAL.Models.Surveys.SurveyView", "SurveyView")
                        .WithMany("TermsAndConditionsLabels")
                        .HasForeignKey("SurveyViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.ThankYouPageLabel", b =>
                {
                    b.HasOne("DAL.Models.Surveys.SurveyView", "SurveyView")
                        .WithMany("ThankYouPageLabels")
                        .HasForeignKey("SurveyViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.TitlePageLabel", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany("TitleLabels")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.WelcomePageLabel", b =>
                {
                    b.HasOne("DAL.Models.Surveys.SurveyView", "SurveyView")
                        .WithMany("WelcomePageLabels")
                        .HasForeignKey("SurveyViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });

            modelBuilder.Entity("DAL.Models.SurveyUser", b =>
                {
                    b.HasOne("DAL.Models.Surveys.PrimaryRespondent", "PrimaryRespondent")
                        .WithMany()
                        .HasForeignKey("PrimaryRespondentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Models.Surveys.Shortcode", "Shortcode")
                        .WithMany()
                        .HasForeignKey("ShortcodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.Surveys.PrimaryRespondent", b =>
                {
                    b.HasOne("DAL.Models.Surveys.Groupcode", "Groupcode")
                        .WithMany()
                        .HasForeignKey("GroupcodeId");

                    b.HasOne("DAL.Models.Surveys.Shortcode", "Shortcode")
                        .WithMany()
                        .HasForeignKey("ShortcodeId");

                    b.HasOne("DAL.Models.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
